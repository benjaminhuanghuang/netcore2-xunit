using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Xunit;
//
using BankManager;

namespace BankManager.Tests
{
    [Fact (Skip = "specific reason")]
    public class AccountRepositoryTests
    {
        private AccountRepository _accountRepository;
        public void AccountRepositoryTests()
        {
            _accountRepository = new AccountRepository();
        }

        [Fact]
        public void GetBalance_WithNoTransactions_Returns0Balance()
        {
            var accountBalance = _accountRepository.GetBalance();

            const int expectedBalance = 0;
            Assert.That(accountBalance, Is.EqualTo(expectedBalance),
                 "Empty account should return a 0 balance.");
        }

        [Fact]
        public void ProcessTransaction_FirstTransaction_StoredTransactionsContainOnlyThatOneTransaction()
        {
            var transaction = new SimpleTransaction(10);

            _accountRepository.ProcessTransaction(transaction);

            var transactions = _accountRepository.GetTransactions();
            Assert.That(transactions.Count(), Is.EqualTo(1),
                "First transaction should be stored in the transaction list.");
            Assert.That(transactions.Single(), Is.EqualTo(transaction),
                "First transaction should be the only item stored.");
        }

        public static IEnumerable Transactions
        {
            get
            {
                yield return new TestCaseData(new SimpleTransaction(10));
                yield return new TestCaseData(new SimpleTransaction(0));
                yield return new TestCaseData(new SimpleTransaction(-1));
                yield return new TestCaseData(new FeeTransaction(10,2));
            }
        }

        public void GetBalance_WithOneTransaction_ReturnsTotalOfTransaction(Transaction transaction)
        {
            _accountRepository.ProcessTransaction(transaction);
            var totalOfTransaction = transaction.CalculateTotalTransaction();

            var currentBalance = _accountRepository.GetBalance();

            Assert.That(currentBalance, Is.EqualTo(totalOfTransaction),
                "Balance of one transaction should equal the total of that one transaction.");
        }

        [Fact]
        public void GetTransactions_ZeroTransactionIsNotPartOfTransactionList()
        {
            _accountRepository.ProcessTransaction(new SimpleTransaction(0));

            var transactions = _accountRepository.GetTransactions();

            Assert.That(transactions.All(x=>x.CalculateTotalTransaction() != 0),
                "A zero transaction shouldn't show  in the transaction list.");
        }

        public void GetBalance_WithTwoEqualTransactions_ReturnsDoubleOfTransactionValue()
        {
            const int transactionValue = 100;
            _accountRepository.ProcessTransaction(new SimpleTransaction(transactionValue));
            _accountRepository.ProcessTransaction(new SimpleTransaction(transactionValue));

            var balance = _accountRepository.GetBalance();

            const int doubleTransactionValue = transactionValue*2;
            Assert.That(balance, Is.EqualTo(doubleTransactionValue),
                "Balance retrieved was not double the value of the transaction value processed twice.");
        }
    }
}